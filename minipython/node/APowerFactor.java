/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class APowerFactor extends PFactor
{
    private PBase _base_;
    private TPow _pow_;
    private PFactor _factor_;

    public APowerFactor()
    {
    }

    public APowerFactor(
        PBase _base_,
        TPow _pow_,
        PFactor _factor_)
    {
        setBase(_base_);

        setPow(_pow_);

        setFactor(_factor_);

    }
    public Object clone()
    {
        return new APowerFactor(
            (PBase) cloneNode(_base_),
            (TPow) cloneNode(_pow_),
            (PFactor) cloneNode(_factor_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPowerFactor(this);
    }

    public PBase getBase()
    {
        return _base_;
    }

    public void setBase(PBase node)
    {
        if(_base_ != null)
        {
            _base_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _base_ = node;
    }

    public TPow getPow()
    {
        return _pow_;
    }

    public void setPow(TPow node)
    {
        if(_pow_ != null)
        {
            _pow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _pow_ = node;
    }

    public PFactor getFactor()
    {
        return _factor_;
    }

    public void setFactor(PFactor node)
    {
        if(_factor_ != null)
        {
            _factor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _factor_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_base_)
            + toString(_pow_)
            + toString(_factor_);
    }

    void removeChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_pow_ == child)
        {
            _pow_ = null;
            return;
        }

        if(_factor_ == child)
        {
            _factor_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            setBase((PBase) newChild);
            return;
        }

        if(_pow_ == oldChild)
        {
            setPow((TPow) newChild);
            return;
        }

        if(_factor_ == oldChild)
        {
            setFactor((PFactor) newChild);
            return;
        }

    }
}
