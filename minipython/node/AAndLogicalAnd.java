/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AAndLogicalAnd extends PLogicalAnd
{
    private PLogicalAnd _logicalAnd_;
    private TAnd _and_;
    private PLogicalNot _logicalNot_;

    public AAndLogicalAnd()
    {
    }

    public AAndLogicalAnd(
        PLogicalAnd _logicalAnd_,
        TAnd _and_,
        PLogicalNot _logicalNot_)
    {
        setLogicalAnd(_logicalAnd_);

        setAnd(_and_);

        setLogicalNot(_logicalNot_);

    }
    public Object clone()
    {
        return new AAndLogicalAnd(
            (PLogicalAnd) cloneNode(_logicalAnd_),
            (TAnd) cloneNode(_and_),
            (PLogicalNot) cloneNode(_logicalNot_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndLogicalAnd(this);
    }

    public PLogicalAnd getLogicalAnd()
    {
        return _logicalAnd_;
    }

    public void setLogicalAnd(PLogicalAnd node)
    {
        if(_logicalAnd_ != null)
        {
            _logicalAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _logicalAnd_ = node;
    }

    public TAnd getAnd()
    {
        return _and_;
    }

    public void setAnd(TAnd node)
    {
        if(_and_ != null)
        {
            _and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _and_ = node;
    }

    public PLogicalNot getLogicalNot()
    {
        return _logicalNot_;
    }

    public void setLogicalNot(PLogicalNot node)
    {
        if(_logicalNot_ != null)
        {
            _logicalNot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _logicalNot_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_logicalAnd_)
            + toString(_and_)
            + toString(_logicalNot_);
    }

    void removeChild(Node child)
    {
        if(_logicalAnd_ == child)
        {
            _logicalAnd_ = null;
            return;
        }

        if(_and_ == child)
        {
            _and_ = null;
            return;
        }

        if(_logicalNot_ == child)
        {
            _logicalNot_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_logicalAnd_ == oldChild)
        {
            setLogicalAnd((PLogicalAnd) newChild);
            return;
        }

        if(_and_ == oldChild)
        {
            setAnd((TAnd) newChild);
            return;
        }

        if(_logicalNot_ == oldChild)
        {
            setLogicalNot((PLogicalNot) newChild);
            return;
        }

    }
}
