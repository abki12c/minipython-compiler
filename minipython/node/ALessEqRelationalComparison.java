/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ALessEqRelationalComparison extends PRelationalComparison
{
    private PExpression _expL_;
    private TLessEq _lessEq_;
    private PExpression _expR_;

    public ALessEqRelationalComparison()
    {
    }

    public ALessEqRelationalComparison(
        PExpression _expL_,
        TLessEq _lessEq_,
        PExpression _expR_)
    {
        setExpL(_expL_);

        setLessEq(_lessEq_);

        setExpR(_expR_);

    }
    public Object clone()
    {
        return new ALessEqRelationalComparison(
            (PExpression) cloneNode(_expL_),
            (TLessEq) cloneNode(_lessEq_),
            (PExpression) cloneNode(_expR_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALessEqRelationalComparison(this);
    }

    public PExpression getExpL()
    {
        return _expL_;
    }

    public void setExpL(PExpression node)
    {
        if(_expL_ != null)
        {
            _expL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expL_ = node;
    }

    public TLessEq getLessEq()
    {
        return _lessEq_;
    }

    public void setLessEq(TLessEq node)
    {
        if(_lessEq_ != null)
        {
            _lessEq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lessEq_ = node;
    }

    public PExpression getExpR()
    {
        return _expR_;
    }

    public void setExpR(PExpression node)
    {
        if(_expR_ != null)
        {
            _expR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expR_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expL_)
            + toString(_lessEq_)
            + toString(_expR_);
    }

    void removeChild(Node child)
    {
        if(_expL_ == child)
        {
            _expL_ = null;
            return;
        }

        if(_lessEq_ == child)
        {
            _lessEq_ = null;
            return;
        }

        if(_expR_ == child)
        {
            _expR_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expL_ == oldChild)
        {
            setExpL((PExpression) newChild);
            return;
        }

        if(_lessEq_ == oldChild)
        {
            setLessEq((TLessEq) newChild);
            return;
        }

        if(_expR_ == oldChild)
        {
            setExpR((PExpression) newChild);
            return;
        }

    }
}
