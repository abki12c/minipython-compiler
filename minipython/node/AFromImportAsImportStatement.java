/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AFromImportAsImportStatement extends PImportStatement
{
    private PModule _module_;
    private TId _id_;
    private final LinkedList _asId_ = new TypedLinkedList(new AsId_Cast());
    private final LinkedList _commaIdAsId_ = new TypedLinkedList(new CommaIdAsId_Cast());

    public AFromImportAsImportStatement()
    {
    }

    public AFromImportAsImportStatement(
        PModule _module_,
        TId _id_,
        List _asId_,
        List _commaIdAsId_)
    {
        setModule(_module_);

        setId(_id_);

        {
            this._asId_.clear();
            this._asId_.addAll(_asId_);
        }

        {
            this._commaIdAsId_.clear();
            this._commaIdAsId_.addAll(_commaIdAsId_);
        }

    }
    public Object clone()
    {
        return new AFromImportAsImportStatement(
            (PModule) cloneNode(_module_),
            (TId) cloneNode(_id_),
            cloneList(_asId_),
            cloneList(_commaIdAsId_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFromImportAsImportStatement(this);
    }

    public PModule getModule()
    {
        return _module_;
    }

    public void setModule(PModule node)
    {
        if(_module_ != null)
        {
            _module_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _module_ = node;
    }

    public TId getId()
    {
        return _id_;
    }

    public void setId(TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public LinkedList getAsId()
    {
        return _asId_;
    }

    public void setAsId(List list)
    {
        _asId_.clear();
        _asId_.addAll(list);
    }

    public LinkedList getCommaIdAsId()
    {
        return _commaIdAsId_;
    }

    public void setCommaIdAsId(List list)
    {
        _commaIdAsId_.clear();
        _commaIdAsId_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_module_)
            + toString(_id_)
            + toString(_asId_)
            + toString(_commaIdAsId_);
    }

    void removeChild(Node child)
    {
        if(_module_ == child)
        {
            _module_ = null;
            return;
        }

        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_asId_.remove(child))
        {
            return;
        }

        if(_commaIdAsId_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_module_ == oldChild)
        {
            setModule((PModule) newChild);
            return;
        }

        if(_id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        for(ListIterator i = _asId_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _commaIdAsId_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class AsId_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PAsId node = (PAsId) o;

            if((node.parent() != null) &&
                (node.parent() != AFromImportAsImportStatement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AFromImportAsImportStatement.this))
            {
                node.parent(AFromImportAsImportStatement.this);
            }

            return node;
        }
    }

    private class CommaIdAsId_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PCommaIdAsId node = (PCommaIdAsId) o;

            if((node.parent() != null) &&
                (node.parent() != AFromImportAsImportStatement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AFromImportAsImportStatement.this))
            {
                node.parent(AFromImportAsImportStatement.this);
            }

            return node;
        }
    }
}
