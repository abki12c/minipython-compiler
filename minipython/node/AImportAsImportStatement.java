/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AImportAsImportStatement extends PImportStatement
{
    private PModule _module_;
    private final LinkedList _asId_ = new TypedLinkedList(new AsId_Cast());
    private final LinkedList _commaModuleAsId_ = new TypedLinkedList(new CommaModuleAsId_Cast());

    public AImportAsImportStatement()
    {
    }

    public AImportAsImportStatement(
        PModule _module_,
        List _asId_,
        List _commaModuleAsId_)
    {
        setModule(_module_);

        {
            this._asId_.clear();
            this._asId_.addAll(_asId_);
        }

        {
            this._commaModuleAsId_.clear();
            this._commaModuleAsId_.addAll(_commaModuleAsId_);
        }

    }
    public Object clone()
    {
        return new AImportAsImportStatement(
            (PModule) cloneNode(_module_),
            cloneList(_asId_),
            cloneList(_commaModuleAsId_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAImportAsImportStatement(this);
    }

    public PModule getModule()
    {
        return _module_;
    }

    public void setModule(PModule node)
    {
        if(_module_ != null)
        {
            _module_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _module_ = node;
    }

    public LinkedList getAsId()
    {
        return _asId_;
    }

    public void setAsId(List list)
    {
        _asId_.clear();
        _asId_.addAll(list);
    }

    public LinkedList getCommaModuleAsId()
    {
        return _commaModuleAsId_;
    }

    public void setCommaModuleAsId(List list)
    {
        _commaModuleAsId_.clear();
        _commaModuleAsId_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_module_)
            + toString(_asId_)
            + toString(_commaModuleAsId_);
    }

    void removeChild(Node child)
    {
        if(_module_ == child)
        {
            _module_ = null;
            return;
        }

        if(_asId_.remove(child))
        {
            return;
        }

        if(_commaModuleAsId_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_module_ == oldChild)
        {
            setModule((PModule) newChild);
            return;
        }

        for(ListIterator i = _asId_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _commaModuleAsId_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class AsId_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PAsId node = (PAsId) o;

            if((node.parent() != null) &&
                (node.parent() != AImportAsImportStatement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AImportAsImportStatement.this))
            {
                node.parent(AImportAsImportStatement.this);
            }

            return node;
        }
    }

    private class CommaModuleAsId_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PCommaModuleAsId node = (PCommaModuleAsId) o;

            if((node.parent() != null) &&
                (node.parent() != AImportAsImportStatement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AImportAsImportStatement.this))
            {
                node.parent(AImportAsImportStatement.this);
            }

            return node;
        }
    }
}
