/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AForStatement extends PStatement
{
    private TId _forId_;
    private TId _inId_;
    private PStatement _statement_;

    public AForStatement()
    {
    }

    public AForStatement(
        TId _forId_,
        TId _inId_,
        PStatement _statement_)
    {
        setForId(_forId_);

        setInId(_inId_);

        setStatement(_statement_);

    }
    public Object clone()
    {
        return new AForStatement(
            (TId) cloneNode(_forId_),
            (TId) cloneNode(_inId_),
            (PStatement) cloneNode(_statement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStatement(this);
    }

    public TId getForId()
    {
        return _forId_;
    }

    public void setForId(TId node)
    {
        if(_forId_ != null)
        {
            _forId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _forId_ = node;
    }

    public TId getInId()
    {
        return _inId_;
    }

    public void setInId(TId node)
    {
        if(_inId_ != null)
        {
            _inId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _inId_ = node;
    }

    public PStatement getStatement()
    {
        return _statement_;
    }

    public void setStatement(PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _statement_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_forId_)
            + toString(_inId_)
            + toString(_statement_);
    }

    void removeChild(Node child)
    {
        if(_forId_ == child)
        {
            _forId_ = null;
            return;
        }

        if(_inId_ == child)
        {
            _inId_ = null;
            return;
        }

        if(_statement_ == child)
        {
            _statement_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_forId_ == oldChild)
        {
            setForId((TId) newChild);
            return;
        }

        if(_inId_ == oldChild)
        {
            setInId((TId) newChild);
            return;
        }

        if(_statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

    }
}
