/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AListAssignmentStatement extends PStatement
{
    private TId _id_;
    private PExpression _brExpression_;
    private PExpression _eqExpression_;

    public AListAssignmentStatement()
    {
    }

    public AListAssignmentStatement(
        TId _id_,
        PExpression _brExpression_,
        PExpression _eqExpression_)
    {
        setId(_id_);

        setBrExpression(_brExpression_);

        setEqExpression(_eqExpression_);

    }
    public Object clone()
    {
        return new AListAssignmentStatement(
            (TId) cloneNode(_id_),
            (PExpression) cloneNode(_brExpression_),
            (PExpression) cloneNode(_eqExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListAssignmentStatement(this);
    }

    public TId getId()
    {
        return _id_;
    }

    public void setId(TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public PExpression getBrExpression()
    {
        return _brExpression_;
    }

    public void setBrExpression(PExpression node)
    {
        if(_brExpression_ != null)
        {
            _brExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _brExpression_ = node;
    }

    public PExpression getEqExpression()
    {
        return _eqExpression_;
    }

    public void setEqExpression(PExpression node)
    {
        if(_eqExpression_ != null)
        {
            _eqExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _eqExpression_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_id_)
            + toString(_brExpression_)
            + toString(_eqExpression_);
    }

    void removeChild(Node child)
    {
        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_brExpression_ == child)
        {
            _brExpression_ = null;
            return;
        }

        if(_eqExpression_ == child)
        {
            _eqExpression_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(_brExpression_ == oldChild)
        {
            setBrExpression((PExpression) newChild);
            return;
        }

        if(_eqExpression_ == oldChild)
        {
            setEqExpression((PExpression) newChild);
            return;
        }

    }
}
