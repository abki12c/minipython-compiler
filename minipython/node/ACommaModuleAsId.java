/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ACommaModuleAsId extends PCommaModuleAsId
{
    private PModule _module_;
    private TId _id_;

    public ACommaModuleAsId()
    {
    }

    public ACommaModuleAsId(
        PModule _module_,
        TId _id_)
    {
        setModule(_module_);

        setId(_id_);

    }
    public Object clone()
    {
        return new ACommaModuleAsId(
            (PModule) cloneNode(_module_),
            (TId) cloneNode(_id_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACommaModuleAsId(this);
    }

    public PModule getModule()
    {
        return _module_;
    }

    public void setModule(PModule node)
    {
        if(_module_ != null)
        {
            _module_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _module_ = node;
    }

    public TId getId()
    {
        return _id_;
    }

    public void setId(TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_module_)
            + toString(_id_);
    }

    void removeChild(Node child)
    {
        if(_module_ == child)
        {
            _module_ = null;
            return;
        }

        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_module_ == oldChild)
        {
            setModule((PModule) newChild);
            return;
        }

        if(_id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

    }
}
