/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGoal(AGoal node);
    void caseAFunctionCommands(AFunctionCommands node);
    void caseAStatementCommands(AStatementCommands node);
    void caseAFunction(AFunction node);
    void caseAArgument(AArgument node);
    void caseAAssignValue(AAssignValue node);
    void caseACommaAssign(ACommaAssign node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatement(AForStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseAAssignStatement(AAssignStatement node);
    void caseAAssignMinStatement(AAssignMinStatement node);
    void caseAAssignDivStatement(AAssignDivStatement node);
    void caseAListAssignmentStatement(AListAssignmentStatement node);
    void caseAAssertStatement(AAssertStatement node);
    void caseAFunctionCallStatement(AFunctionCallStatement node);
    void caseAImportStatement(AImportStatement node);
    void caseAComparison(AComparison node);
    void caseAOrLogicalOr(AOrLogicalOr node);
    void caseAAndLogicalOr(AAndLogicalOr node);
    void caseANotLogicalOr(ANotLogicalOr node);
    void caseALessLogicalOr(ALessLogicalOr node);
    void caseAGreatLogicalOr(AGreatLogicalOr node);
    void caseAGreatEqLogicalOr(AGreatEqLogicalOr node);
    void caseALessEqLogicalOr(ALessEqLogicalOr node);
    void caseANotEqLogicalOr(ANotEqLogicalOr node);
    void caseAEqLogicalOr(AEqLogicalOr node);
    void caseATrueLogicalOr(ATrueLogicalOr node);
    void caseAFalseLogicalOr(AFalseLogicalOr node);
    void caseAPlusExpression(APlusExpression node);
    void caseAMinusExpression(AMinusExpression node);
    void caseAMultExpression(AMultExpression node);
    void caseADivExpression(ADivExpression node);
    void caseAModExpression(AModExpression node);
    void caseAPowerExpression(APowerExpression node);
    void caseAParenExpExpression(AParenExpExpression node);
    void caseAValueExpression(AValueExpression node);
    void caseAIdentifierExpression(AIdentifierExpression node);
    void caseAFunctionCallExpression(AFunctionCallExpression node);
    void caseAIndexingExpression(AIndexingExpression node);
    void caseABracketsExpExpression(ABracketsExpExpression node);
    void caseALenExpression(ALenExpression node);
    void caseAAsciiExpression(AAsciiExpression node);
    void caseAMaxExpression(AMaxExpression node);
    void caseAMinExpression(AMinExpression node);
    void caseAImportAsImportStatement(AImportAsImportStatement node);
    void caseAFromImportAsImportStatement(AFromImportAsImportStatement node);
    void caseAModule(AModule node);
    void caseAFunctionCall(AFunctionCall node);
    void caseAArglist(AArglist node);
    void caseAFunctionCallValueValue(AFunctionCallValueValue node);
    void caseANumberValueValue(ANumberValueValue node);
    void caseAStringValueValue(AStringValueValue node);
    void caseANoneValueValue(ANoneValueValue node);
    void caseACommaExpression(ACommaExpression node);
    void caseACommaValue(ACommaValue node);
    void caseACommaModule(ACommaModule node);
    void caseACommaModuleAsId(ACommaModuleAsId node);
    void caseACommaIdAsId(ACommaIdAsId node);
    void caseAAsId(AAsId node);
    void caseAIdDot(AIdDot node);

    void caseTTab(TTab node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTPow(TPow node);
    void caseTAssign(TAssign node);
    void caseTMinEq(TMinEq node);
    void caseTDivEq(TDivEq node);
    void caseTEq(TEq node);
    void caseTNotEq(TNotEq node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTIf(TIf node);
    void caseTPrint(TPrint node);
    void caseTLess(TLess node);
    void caseTLessEq(TLessEq node);
    void caseTGreat(TGreat node);
    void caseTGreatEq(TGreatEq node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTIn(TIn node);
    void caseTDef(TDef node);
    void caseTReturn(TReturn node);
    void caseTAssert(TAssert node);
    void caseTImport(TImport node);
    void caseTLen(TLen node);
    void caseTAscii(TAscii node);
    void caseTMax(TMax node);
    void caseTMin(TMin node);
    void caseTAs(TAs node);
    void caseTFrom(TFrom node);
    void caseTSemi(TSemi node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTElse(TElse node);
    void caseTNone(TNone node);
    void caseTQuote(TQuote node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTNumber(TNumber node);
    void caseTString(TString node);
    void caseTId(TId node);
    void caseEOF(EOF node);
}
