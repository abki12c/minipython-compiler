/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPGoal().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getCommands().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommands) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAFunctionCommands(AFunctionCommands node)
    {
        defaultIn(node);
    }

    public void outAFunctionCommands(AFunctionCommands node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCommands(AFunctionCommands node)
    {
        inAFunctionCommands(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionCommands(node);
    }

    public void inAStatementCommands(AStatementCommands node)
    {
        defaultIn(node);
    }

    public void outAStatementCommands(AStatementCommands node)
    {
        defaultOut(node);
    }

    public void caseAStatementCommands(AStatementCommands node)
    {
        inAStatementCommands(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementCommands(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        {
            Object temp[] = node.getArgument().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArgument) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunction(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        {
            Object temp[] = node.getCommaAssign().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaAssign) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getAssignValue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAssignValue) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArgument(node);
    }

    public void inAAssignValue(AAssignValue node)
    {
        defaultIn(node);
    }

    public void outAAssignValue(AAssignValue node)
    {
        defaultOut(node);
    }

    public void caseAAssignValue(AAssignValue node)
    {
        inAAssignValue(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAAssignValue(node);
    }

    public void inACommaAssign(ACommaAssign node)
    {
        defaultIn(node);
    }

    public void outACommaAssign(ACommaAssign node)
    {
        defaultOut(node);
    }

    public void caseACommaAssign(ACommaAssign node)
    {
        inACommaAssign(node);
        {
            Object temp[] = node.getAssignValue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAssignValue) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outACommaAssign(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getInId() != null)
        {
            node.getInId().apply(this);
        }
        if(node.getForId() != null)
        {
            node.getForId().apply(this);
        }
        outAForStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPrintStatement(node);
    }

    public void inAAssignStatement(AAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatement(AAssignStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssignStatement(AAssignStatement node)
    {
        inAAssignStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignStatement(node);
    }

    public void inAAssignMinStatement(AAssignMinStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignMinStatement(AAssignMinStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssignMinStatement(AAssignMinStatement node)
    {
        inAAssignMinStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignMinStatement(node);
    }

    public void inAAssignDivStatement(AAssignDivStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignDivStatement(AAssignDivStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssignDivStatement(AAssignDivStatement node)
    {
        inAAssignDivStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignDivStatement(node);
    }

    public void inAListAssignmentStatement(AListAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAListAssignmentStatement(AListAssignmentStatement node)
    {
        defaultOut(node);
    }

    public void caseAListAssignmentStatement(AListAssignmentStatement node)
    {
        inAListAssignmentStatement(node);
        if(node.getEqExpression() != null)
        {
            node.getEqExpression().apply(this);
        }
        if(node.getBrExpression() != null)
        {
            node.getBrExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAListAssignmentStatement(node);
    }

    public void inAAssertStatement(AAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertStatement(AAssertStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        inAAssertStatement(node);
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssertStatement(node);
    }

    public void inAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallStatement(AFunctionCallStatement node)
    {
        inAFunctionCallStatement(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallStatement(node);
    }

    public void inAImportStatement(AImportStatement node)
    {
        defaultIn(node);
    }

    public void outAImportStatement(AImportStatement node)
    {
        defaultOut(node);
    }

    public void caseAImportStatement(AImportStatement node)
    {
        inAImportStatement(node);
        if(node.getImportStatement() != null)
        {
            node.getImportStatement().apply(this);
        }
        outAImportStatement(node);
    }

    public void inAComparison(AComparison node)
    {
        defaultIn(node);
    }

    public void outAComparison(AComparison node)
    {
        defaultOut(node);
    }

    public void caseAComparison(AComparison node)
    {
        inAComparison(node);
        if(node.getLogicalOr() != null)
        {
            node.getLogicalOr().apply(this);
        }
        outAComparison(node);
    }

    public void inAOrLogicalOr(AOrLogicalOr node)
    {
        defaultIn(node);
    }

    public void outAOrLogicalOr(AOrLogicalOr node)
    {
        defaultOut(node);
    }

    public void caseAOrLogicalOr(AOrLogicalOr node)
    {
        inAOrLogicalOr(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAOrLogicalOr(node);
    }

    public void inAAndLogicalOr(AAndLogicalOr node)
    {
        defaultIn(node);
    }

    public void outAAndLogicalOr(AAndLogicalOr node)
    {
        defaultOut(node);
    }

    public void caseAAndLogicalOr(AAndLogicalOr node)
    {
        inAAndLogicalOr(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAAndLogicalOr(node);
    }

    public void inANotLogicalOr(ANotLogicalOr node)
    {
        defaultIn(node);
    }

    public void outANotLogicalOr(ANotLogicalOr node)
    {
        defaultOut(node);
    }

    public void caseANotLogicalOr(ANotLogicalOr node)
    {
        inANotLogicalOr(node);
        if(node.getLogicalOr() != null)
        {
            node.getLogicalOr().apply(this);
        }
        outANotLogicalOr(node);
    }

    public void inALessLogicalOr(ALessLogicalOr node)
    {
        defaultIn(node);
    }

    public void outALessLogicalOr(ALessLogicalOr node)
    {
        defaultOut(node);
    }

    public void caseALessLogicalOr(ALessLogicalOr node)
    {
        inALessLogicalOr(node);
        if(node.getExpR() != null)
        {
            node.getExpR().apply(this);
        }
        if(node.getExpL() != null)
        {
            node.getExpL().apply(this);
        }
        outALessLogicalOr(node);
    }

    public void inAGreatLogicalOr(AGreatLogicalOr node)
    {
        defaultIn(node);
    }

    public void outAGreatLogicalOr(AGreatLogicalOr node)
    {
        defaultOut(node);
    }

    public void caseAGreatLogicalOr(AGreatLogicalOr node)
    {
        inAGreatLogicalOr(node);
        if(node.getExpR() != null)
        {
            node.getExpR().apply(this);
        }
        if(node.getExpL() != null)
        {
            node.getExpL().apply(this);
        }
        outAGreatLogicalOr(node);
    }

    public void inAGreatEqLogicalOr(AGreatEqLogicalOr node)
    {
        defaultIn(node);
    }

    public void outAGreatEqLogicalOr(AGreatEqLogicalOr node)
    {
        defaultOut(node);
    }

    public void caseAGreatEqLogicalOr(AGreatEqLogicalOr node)
    {
        inAGreatEqLogicalOr(node);
        if(node.getExpR() != null)
        {
            node.getExpR().apply(this);
        }
        if(node.getExpL() != null)
        {
            node.getExpL().apply(this);
        }
        outAGreatEqLogicalOr(node);
    }

    public void inALessEqLogicalOr(ALessEqLogicalOr node)
    {
        defaultIn(node);
    }

    public void outALessEqLogicalOr(ALessEqLogicalOr node)
    {
        defaultOut(node);
    }

    public void caseALessEqLogicalOr(ALessEqLogicalOr node)
    {
        inALessEqLogicalOr(node);
        if(node.getExpR() != null)
        {
            node.getExpR().apply(this);
        }
        if(node.getExpL() != null)
        {
            node.getExpL().apply(this);
        }
        outALessEqLogicalOr(node);
    }

    public void inANotEqLogicalOr(ANotEqLogicalOr node)
    {
        defaultIn(node);
    }

    public void outANotEqLogicalOr(ANotEqLogicalOr node)
    {
        defaultOut(node);
    }

    public void caseANotEqLogicalOr(ANotEqLogicalOr node)
    {
        inANotEqLogicalOr(node);
        if(node.getExpR() != null)
        {
            node.getExpR().apply(this);
        }
        if(node.getExpL() != null)
        {
            node.getExpL().apply(this);
        }
        outANotEqLogicalOr(node);
    }

    public void inAEqLogicalOr(AEqLogicalOr node)
    {
        defaultIn(node);
    }

    public void outAEqLogicalOr(AEqLogicalOr node)
    {
        defaultOut(node);
    }

    public void caseAEqLogicalOr(AEqLogicalOr node)
    {
        inAEqLogicalOr(node);
        if(node.getExpR() != null)
        {
            node.getExpR().apply(this);
        }
        if(node.getExpL() != null)
        {
            node.getExpL().apply(this);
        }
        outAEqLogicalOr(node);
    }

    public void inATrueLogicalOr(ATrueLogicalOr node)
    {
        defaultIn(node);
    }

    public void outATrueLogicalOr(ATrueLogicalOr node)
    {
        defaultOut(node);
    }

    public void caseATrueLogicalOr(ATrueLogicalOr node)
    {
        inATrueLogicalOr(node);
        outATrueLogicalOr(node);
    }

    public void inAFalseLogicalOr(AFalseLogicalOr node)
    {
        defaultIn(node);
    }

    public void outAFalseLogicalOr(AFalseLogicalOr node)
    {
        defaultOut(node);
    }

    public void caseAFalseLogicalOr(AFalseLogicalOr node)
    {
        inAFalseLogicalOr(node);
        outAFalseLogicalOr(node);
    }

    public void inAPlusExpression(APlusExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusExpression(APlusExpression node)
    {
        defaultOut(node);
    }

    public void caseAPlusExpression(APlusExpression node)
    {
        inAPlusExpression(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAPlusExpression(node);
    }

    public void inAMinusExpression(AMinusExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression(AMinusExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinusExpression(AMinusExpression node)
    {
        inAMinusExpression(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAMinusExpression(node);
    }

    public void inAMultExpression(AMultExpression node)
    {
        defaultIn(node);
    }

    public void outAMultExpression(AMultExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultExpression(AMultExpression node)
    {
        inAMultExpression(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAMultExpression(node);
    }

    public void inADivExpression(ADivExpression node)
    {
        defaultIn(node);
    }

    public void outADivExpression(ADivExpression node)
    {
        defaultOut(node);
    }

    public void caseADivExpression(ADivExpression node)
    {
        inADivExpression(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outADivExpression(node);
    }

    public void inAModExpression(AModExpression node)
    {
        defaultIn(node);
    }

    public void outAModExpression(AModExpression node)
    {
        defaultOut(node);
    }

    public void caseAModExpression(AModExpression node)
    {
        inAModExpression(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAModExpression(node);
    }

    public void inAPowerExpression(APowerExpression node)
    {
        defaultIn(node);
    }

    public void outAPowerExpression(APowerExpression node)
    {
        defaultOut(node);
    }

    public void caseAPowerExpression(APowerExpression node)
    {
        inAPowerExpression(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAPowerExpression(node);
    }

    public void inAParenExpExpression(AParenExpExpression node)
    {
        defaultIn(node);
    }

    public void outAParenExpExpression(AParenExpExpression node)
    {
        defaultOut(node);
    }

    public void caseAParenExpExpression(AParenExpExpression node)
    {
        inAParenExpExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAParenExpExpression(node);
    }

    public void inAValueExpression(AValueExpression node)
    {
        defaultIn(node);
    }

    public void outAValueExpression(AValueExpression node)
    {
        defaultOut(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        inAValueExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueExpression(node);
    }

    public void inAIdentifierExpression(AIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression(AIdentifierExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        inAIdentifierExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentifierExpression(node);
    }

    public void inAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallExpression(AFunctionCallExpression node)
    {
        inAFunctionCallExpression(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallExpression(node);
    }

    public void inAIndexingExpression(AIndexingExpression node)
    {
        defaultIn(node);
    }

    public void outAIndexingExpression(AIndexingExpression node)
    {
        defaultOut(node);
    }

    public void caseAIndexingExpression(AIndexingExpression node)
    {
        inAIndexingExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIndexingExpression(node);
    }

    public void inABracketsExpExpression(ABracketsExpExpression node)
    {
        defaultIn(node);
    }

    public void outABracketsExpExpression(ABracketsExpExpression node)
    {
        defaultOut(node);
    }

    public void caseABracketsExpExpression(ABracketsExpExpression node)
    {
        inABracketsExpExpression(node);
        {
            Object temp[] = node.getCommaValue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaValue) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outABracketsExpExpression(node);
    }

    public void inALenExpression(ALenExpression node)
    {
        defaultIn(node);
    }

    public void outALenExpression(ALenExpression node)
    {
        defaultOut(node);
    }

    public void caseALenExpression(ALenExpression node)
    {
        inALenExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outALenExpression(node);
    }

    public void inAAsciiExpression(AAsciiExpression node)
    {
        defaultIn(node);
    }

    public void outAAsciiExpression(AAsciiExpression node)
    {
        defaultOut(node);
    }

    public void caseAAsciiExpression(AAsciiExpression node)
    {
        inAAsciiExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAsciiExpression(node);
    }

    public void inAMaxExpression(AMaxExpression node)
    {
        defaultIn(node);
    }

    public void outAMaxExpression(AMaxExpression node)
    {
        defaultOut(node);
    }

    public void caseAMaxExpression(AMaxExpression node)
    {
        inAMaxExpression(node);
        {
            Object temp[] = node.getCommaValue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaValue) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAMaxExpression(node);
    }

    public void inAMinExpression(AMinExpression node)
    {
        defaultIn(node);
    }

    public void outAMinExpression(AMinExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinExpression(AMinExpression node)
    {
        inAMinExpression(node);
        {
            Object temp[] = node.getCommaValue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaValue) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAMinExpression(node);
    }

    public void inAImportAsImportStatement(AImportAsImportStatement node)
    {
        defaultIn(node);
    }

    public void outAImportAsImportStatement(AImportAsImportStatement node)
    {
        defaultOut(node);
    }

    public void caseAImportAsImportStatement(AImportAsImportStatement node)
    {
        inAImportAsImportStatement(node);
        {
            Object temp[] = node.getCommaModuleAsId().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaModuleAsId) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getAsId().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAsId) temp[i]).apply(this);
            }
        }
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        outAImportAsImportStatement(node);
    }

    public void inAFromImportAsImportStatement(AFromImportAsImportStatement node)
    {
        defaultIn(node);
    }

    public void outAFromImportAsImportStatement(AFromImportAsImportStatement node)
    {
        defaultOut(node);
    }

    public void caseAFromImportAsImportStatement(AFromImportAsImportStatement node)
    {
        inAFromImportAsImportStatement(node);
        {
            Object temp[] = node.getCommaIdAsId().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaIdAsId) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getAsId().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAsId) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        outAFromImportAsImportStatement(node);
    }

    public void inAModule(AModule node)
    {
        defaultIn(node);
    }

    public void outAModule(AModule node)
    {
        defaultOut(node);
    }

    public void caseAModule(AModule node)
    {
        inAModule(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getIdDot().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PIdDot) temp[i]).apply(this);
            }
        }
        outAModule(node);
    }

    public void inAFunctionCall(AFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCall(AFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCall(AFunctionCall node)
    {
        inAFunctionCall(node);
        {
            Object temp[] = node.getArglist().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArglist) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunctionCall(node);
    }

    public void inAArglist(AArglist node)
    {
        defaultIn(node);
    }

    public void outAArglist(AArglist node)
    {
        defaultOut(node);
    }

    public void caseAArglist(AArglist node)
    {
        inAArglist(node);
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAArglist(node);
    }

    public void inAFunctionCallValueValue(AFunctionCallValueValue node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallValueValue(AFunctionCallValueValue node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallValueValue(AFunctionCallValueValue node)
    {
        inAFunctionCallValueValue(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunctionCallValueValue(node);
    }

    public void inANumberValueValue(ANumberValueValue node)
    {
        defaultIn(node);
    }

    public void outANumberValueValue(ANumberValueValue node)
    {
        defaultOut(node);
    }

    public void caseANumberValueValue(ANumberValueValue node)
    {
        inANumberValueValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberValueValue(node);
    }

    public void inAStringValueValue(AStringValueValue node)
    {
        defaultIn(node);
    }

    public void outAStringValueValue(AStringValueValue node)
    {
        defaultOut(node);
    }

    public void caseAStringValueValue(AStringValueValue node)
    {
        inAStringValueValue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValueValue(node);
    }

    public void inANoneValueValue(ANoneValueValue node)
    {
        defaultIn(node);
    }

    public void outANoneValueValue(ANoneValueValue node)
    {
        defaultOut(node);
    }

    public void caseANoneValueValue(ANoneValueValue node)
    {
        inANoneValueValue(node);
        if(node.getNone() != null)
        {
            node.getNone().apply(this);
        }
        outANoneValueValue(node);
    }

    public void inACommaExpression(ACommaExpression node)
    {
        defaultIn(node);
    }

    public void outACommaExpression(ACommaExpression node)
    {
        defaultOut(node);
    }

    public void caseACommaExpression(ACommaExpression node)
    {
        inACommaExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outACommaExpression(node);
    }

    public void inACommaValue(ACommaValue node)
    {
        defaultIn(node);
    }

    public void outACommaValue(ACommaValue node)
    {
        defaultOut(node);
    }

    public void caseACommaValue(ACommaValue node)
    {
        inACommaValue(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outACommaValue(node);
    }

    public void inACommaModule(ACommaModule node)
    {
        defaultIn(node);
    }

    public void outACommaModule(ACommaModule node)
    {
        defaultOut(node);
    }

    public void caseACommaModule(ACommaModule node)
    {
        inACommaModule(node);
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        outACommaModule(node);
    }

    public void inACommaModuleAsId(ACommaModuleAsId node)
    {
        defaultIn(node);
    }

    public void outACommaModuleAsId(ACommaModuleAsId node)
    {
        defaultOut(node);
    }

    public void caseACommaModuleAsId(ACommaModuleAsId node)
    {
        inACommaModuleAsId(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        outACommaModuleAsId(node);
    }

    public void inACommaIdAsId(ACommaIdAsId node)
    {
        defaultIn(node);
    }

    public void outACommaIdAsId(ACommaIdAsId node)
    {
        defaultOut(node);
    }

    public void caseACommaIdAsId(ACommaIdAsId node)
    {
        inACommaIdAsId(node);
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        outACommaIdAsId(node);
    }

    public void inAAsId(AAsId node)
    {
        defaultIn(node);
    }

    public void outAAsId(AAsId node)
    {
        defaultOut(node);
    }

    public void caseAAsId(AAsId node)
    {
        inAAsId(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAsId(node);
    }

    public void inAIdDot(AIdDot node)
    {
        defaultIn(node);
    }

    public void outAIdDot(AIdDot node)
    {
        defaultOut(node);
    }

    public void caseAIdDot(AIdDot node)
    {
        inAIdDot(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdDot(node);
    }
}
