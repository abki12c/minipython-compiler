/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAGoal(AGoal node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCommands(AFunctionCommands node)
    {
        defaultCase(node);
    }

    public void caseAStatementCommands(AStatementCommands node)
    {
        defaultCase(node);
    }

    public void caseAFunction(AFunction node)
    {
        defaultCase(node);
    }

    public void caseAArgument(AArgument node)
    {
        defaultCase(node);
    }

    public void caseAAssignValue(AAssignValue node)
    {
        defaultCase(node);
    }

    public void caseACommaAssign(ACommaAssign node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssignStatement(AAssignStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssignMinStatement(AAssignMinStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssignDivStatement(AAssignDivStatement node)
    {
        defaultCase(node);
    }

    public void caseAListAssignmentStatement(AListAssignmentStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultCase(node);
    }

    public void caseAImportStatement(AImportStatement node)
    {
        defaultCase(node);
    }

    public void caseAComparison(AComparison node)
    {
        defaultCase(node);
    }

    public void caseAOrLogicalOr(AOrLogicalOr node)
    {
        defaultCase(node);
    }

    public void caseAAndLogicalOr(AAndLogicalOr node)
    {
        defaultCase(node);
    }

    public void caseANotLogicalOr(ANotLogicalOr node)
    {
        defaultCase(node);
    }

    public void caseALessLogicalOr(ALessLogicalOr node)
    {
        defaultCase(node);
    }

    public void caseAGreatLogicalOr(AGreatLogicalOr node)
    {
        defaultCase(node);
    }

    public void caseAGreatEqLogicalOr(AGreatEqLogicalOr node)
    {
        defaultCase(node);
    }

    public void caseALessEqLogicalOr(ALessEqLogicalOr node)
    {
        defaultCase(node);
    }

    public void caseANotEqLogicalOr(ANotEqLogicalOr node)
    {
        defaultCase(node);
    }

    public void caseAEqLogicalOr(AEqLogicalOr node)
    {
        defaultCase(node);
    }

    public void caseATrueLogicalOr(ATrueLogicalOr node)
    {
        defaultCase(node);
    }

    public void caseAFalseLogicalOr(AFalseLogicalOr node)
    {
        defaultCase(node);
    }

    public void caseAPlusExpression(APlusExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusExpression(AMinusExpression node)
    {
        defaultCase(node);
    }

    public void caseAMultExpression(AMultExpression node)
    {
        defaultCase(node);
    }

    public void caseADivExpression(ADivExpression node)
    {
        defaultCase(node);
    }

    public void caseAModExpression(AModExpression node)
    {
        defaultCase(node);
    }

    public void caseAPowerExpression(APowerExpression node)
    {
        defaultCase(node);
    }

    public void caseAParenExpExpression(AParenExpExpression node)
    {
        defaultCase(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultCase(node);
    }

    public void caseAIndexingExpression(AIndexingExpression node)
    {
        defaultCase(node);
    }

    public void caseABracketsExpExpression(ABracketsExpExpression node)
    {
        defaultCase(node);
    }

    public void caseALenExpression(ALenExpression node)
    {
        defaultCase(node);
    }

    public void caseAAsciiExpression(AAsciiExpression node)
    {
        defaultCase(node);
    }

    public void caseAMaxExpression(AMaxExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinExpression(AMinExpression node)
    {
        defaultCase(node);
    }

    public void caseAImportAsImportStatement(AImportAsImportStatement node)
    {
        defaultCase(node);
    }

    public void caseAFromImportAsImportStatement(AFromImportAsImportStatement node)
    {
        defaultCase(node);
    }

    public void caseAModule(AModule node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCall(AFunctionCall node)
    {
        defaultCase(node);
    }

    public void caseAArglist(AArglist node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCallValueValue(AFunctionCallValueValue node)
    {
        defaultCase(node);
    }

    public void caseANumberValueValue(ANumberValueValue node)
    {
        defaultCase(node);
    }

    public void caseAStringValueValue(AStringValueValue node)
    {
        defaultCase(node);
    }

    public void caseANoneValueValue(ANoneValueValue node)
    {
        defaultCase(node);
    }

    public void caseACommaExpression(ACommaExpression node)
    {
        defaultCase(node);
    }

    public void caseACommaValue(ACommaValue node)
    {
        defaultCase(node);
    }

    public void caseACommaModule(ACommaModule node)
    {
        defaultCase(node);
    }

    public void caseACommaModuleAsId(ACommaModuleAsId node)
    {
        defaultCase(node);
    }

    public void caseACommaIdAsId(ACommaIdAsId node)
    {
        defaultCase(node);
    }

    public void caseAAsId(AAsId node)
    {
        defaultCase(node);
    }

    public void caseAIdDot(AIdDot node)
    {
        defaultCase(node);
    }

    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTPow(TPow node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTMinEq(TMinEq node)
    {
        defaultCase(node);
    }

    public void caseTDivEq(TDivEq node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTNotEq(TNotEq node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBr(TLBr node)
    {
        defaultCase(node);
    }

    public void caseTRBr(TRBr node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    public void caseTLessEq(TLessEq node)
    {
        defaultCase(node);
    }

    public void caseTGreat(TGreat node)
    {
        defaultCase(node);
    }

    public void caseTGreatEq(TGreatEq node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTAssert(TAssert node)
    {
        defaultCase(node);
    }

    public void caseTImport(TImport node)
    {
        defaultCase(node);
    }

    public void caseTLen(TLen node)
    {
        defaultCase(node);
    }

    public void caseTAscii(TAscii node)
    {
        defaultCase(node);
    }

    public void caseTMax(TMax node)
    {
        defaultCase(node);
    }

    public void caseTMin(TMin node)
    {
        defaultCase(node);
    }

    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTNone(TNone node)
    {
        defaultCase(node);
    }

    public void caseTQuote(TQuote node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
